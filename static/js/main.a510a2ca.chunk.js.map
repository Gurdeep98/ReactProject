{"version":3,"sources":["Components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Search","useState","searchText","setSearchText","photo","setPhoto","page","setPage","images","setImages","useEffect","url","axios","get","then","resp","data","results","Form","className","Row","FormControl","onChange","event","preventDefault","target","value","type","name","placeholder","Button","onClick","variant","length","options","isFitWidth","map","src","urls","small","width","alt","alt_description","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAQe,SAASA,IAAU,IAAD,EACKC,mBAAS,IADd,mBACxBC,EADwB,KACZC,EADY,OAELF,mBAAS,IAFJ,mBAExBG,EAFwB,KAEjBC,EAFiB,OAIPJ,mBAAS,GAJF,mBAIxBK,EAJwB,KAIlBC,EAJkB,OAMHN,mBAAS,IANN,mBAMxBO,EANwB,KAMhBC,EANgB,KA6B/B,OArBAC,qBAAU,WACR,IAAMC,EAAG,sDAAkDL,EAAlD,kBAAgEF,EAAhE,sBANM,+CAOfQ,IAAMC,IAAIF,GAAKG,MAAK,SAACC,GACnBN,GAAU,SAACD,GAAD,4BAAgBA,GAAhB,YAA2BO,EAAKC,KAAKC,kBAEhD,CAACb,EAAOE,IAiBT,mCACE,eAACY,EAAA,EAAD,CAAMC,UAAU,YAAhB,UACE,eAACD,EAAA,EAAKE,IAAN,CAAUD,UAAU,cAApB,UACE,cAACE,EAAA,EAAD,CACEC,SAnBV,SAAmBC,GACjBA,EAAMC,iBACNrB,EAAcoB,EAAME,OAAOC,QAkBnBC,KAAK,OACLC,KAAK,QACLC,YAAY,oBACZV,UAAU,YACVO,MAAOxB,IAGT,cAAC4B,EAAA,EAAD,CAAQC,QAvBhB,SAAmBR,GACjBA,EAAMC,iBACNnB,EAASH,IAqByBiB,UAAU,aAAaa,QAAQ,OAA3D,uBAIF,uBAEA,6BAAK5B,IACL,6BACGI,EAAOyB,OAAP,UACMzB,EAAOyB,OADb,2BAEG,kBAEN,uBACA,sBAAKd,UAAU,aAAf,UACE,cAAC,IAAD,CAASA,UAAU,cAAce,QAAS,CAAEC,YAAY,GAAxD,SACG3B,EAAO4B,KAAI,SAAChC,GACX,OACE,oBAAIe,UAAU,aAAd,SACE,qBACEkB,IAAKjC,EAAMkC,KAAKC,MAChBC,MAAM,MACNC,IAAKrC,EAAMsC,mBAJiBtC,EAAMuC,SAU5C,cAACb,EAAA,EAAD,CAAQC,QA7ChB,SAAkBR,GAChBA,EAAMC,iBACNjB,EAAQD,EAAO,IA2CkBa,UAAU,WAAWa,QAAQ,OAAxD,+BChEKY,MAXf,WACE,OACE,qBAAKzB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,gCACA,cAACnB,EAAD,UCKO6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a510a2ca.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./search.css\";\r\nimport axios from \"axios\";\r\nimport { Form, FormControl, Button } from \"react-bootstrap\";\r\nimport Masonry from \"react-responsive-masonry\";\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Search() {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [photo, setPhoto] = useState(\"\");\r\n  const clientid = \"AHZ8qUDbebRPI4fubsR9H1a409oMm60Igh6VppP7T84\";\r\n  const [page, setPage] = useState(1);\r\n\r\n  const [images, setImages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const url = `https://api.unsplash.com/search/photos?page=${page}&query=${photo}&client_id=${clientid}`;\r\n    axios.get(url).then((resp) => {\r\n      setImages((images) => [...images, ...resp.data.results]);\r\n    });\r\n  }, [photo, page]);\r\n\r\n  function changefun(event) {\r\n    event.preventDefault();\r\n    setSearchText(event.target.value);\r\n  }\r\n  function searchfun(event) {\r\n    event.preventDefault();\r\n    setPhoto(searchText);\r\n  }\r\n\r\n  function showMore(event) {\r\n    event.preventDefault();\r\n    setPage(page + 1);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form className=\"form-data\">\r\n        <Form.Row className=\"search-form\">\r\n          <FormControl\r\n            onChange={changefun}\r\n            type=\"text\"\r\n            name=\"photo\"\r\n            placeholder=\"Search for Photos\"\r\n            className=\"input-bar\"\r\n            value={searchText}\r\n          />\r\n\r\n          <Button onClick={searchfun} className=\"search-btn\" variant=\"dark\">\r\n            Search\r\n          </Button>\r\n        </Form.Row>\r\n        <br />\r\n\r\n        <h2>{photo}</h2>\r\n        <h4>\r\n          {images.length\r\n            ? `${images.length} images have been found`\r\n            : \"search images\"}\r\n        </h4>\r\n        <br />\r\n        <div className=\"image-load\">\r\n          <Masonry className=\" image-grid\" options={{ isFitWidth: true }}>\r\n            {images.map((photo) => {\r\n              return (\r\n                <li className=\"card-image\" key={photo.id}>\r\n                  <img\r\n                    src={photo.urls.small}\r\n                    width=\"385\"\r\n                    alt={photo.alt_description}\r\n                  />\r\n                </li>\r\n              );\r\n            })}\r\n          </Masonry>\r\n          <Button onClick={showMore} className=\"load-btn\" variant=\"dark\">\r\n            Load More\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n","import './App.css';\r\nimport Search from './Components/Search';\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <div className='container'>\r\n        <h1 className='title'>React Photo Search</h1>\r\n        <Search />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}