{"version":3,"sources":["Components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Search","useState","searchText","setSearchText","photo","setPhoto","page","setPage","images","setImages","useEffect","url","axios","get","then","resp","data","results","Form","className","Row","FormControl","onChange","event","preventDefault","target","value","type","name","placeholder","Button","onClick","variant","length","options","isFitWidth","map","src","urls","small","width","height","alt","alt_description","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAQe,SAASA,IAAU,IAAD,EACKC,mBAAS,IADd,mBACxBC,EADwB,KACZC,EADY,OAELF,mBAAS,IAFJ,mBAExBG,EAFwB,KAEjBC,EAFiB,OAIPJ,mBAAS,GAJF,mBAIxBK,EAJwB,KAIlBC,EAJkB,OAMHN,mBAAS,IANN,mBAMxBO,EANwB,KAMhBC,EANgB,KA6B/B,OArBAC,qBAAU,WACR,IAAMC,EAAG,sDAAkDL,EAAlD,kBAAgEF,EAAhE,sBANM,+CAOfQ,IAAMC,IAAIF,GAAKG,MAAK,SAAAC,GAClBN,GAAU,SAAAD,GAAM,4BAAQA,GAAR,YAAmBO,EAAKC,KAAKC,kBAE9C,CAACb,EAAOE,IAiBT,mCACE,eAACY,EAAA,EAAD,CAAMC,UAAU,YAAhB,UACE,eAACD,EAAA,EAAKE,IAAN,CAAUD,UAAU,cAApB,UACE,cAACE,EAAA,EAAD,CACEC,SAnBV,SAAmBC,GACjBA,EAAMC,iBACNrB,EAAcoB,EAAME,OAAOC,QAkBnBC,KAAK,OACLC,KAAK,QACLC,YAAY,oBACZV,UAAU,YACVO,MAAOxB,IAGT,cAAC4B,EAAA,EAAD,CAAQC,QAvBhB,SAAmBR,GACjBA,EAAMC,iBACNnB,EAASH,IAqByBiB,UAAU,aAAaa,QAAQ,OAA3D,uBAIF,uBAEA,6BAAK5B,IACJA,EACC,6BACGI,EAAOyB,OAAP,UACMzB,EAAOyB,OADb,2BAEG,kBAGN,GAEF,uBACA,sBAAKd,UAAU,aAAf,UACE,cAAC,IAAD,CAASA,UAAU,cAAce,QAAS,CAAEC,YAAY,GAAxD,SACG3B,EAAO4B,KAAI,SAAAhC,GACV,OACE,oBAAIe,UAAU,aAAd,SACE,qBACEkB,IAAKjC,EAAMkC,KAAKC,MAChBC,MAAM,MACNC,OAAO,MACPC,IAAKtC,EAAMuC,mBALiBvC,EAAMwC,SAW3CxC,EACC,cAAC0B,EAAA,EAAD,CAAQC,QAnDlB,SAAkBR,GAChBA,EAAMC,iBACNjB,EAAQD,EAAO,IAiDoBa,UAAU,WAAWa,QAAQ,OAAxD,uBAIA,WC1EGa,MAXf,WACE,OACE,qBAAK1B,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,gCACA,cAACnB,EAAD,UCKO8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.46479294.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './search.css';\r\nimport axios from 'axios';\r\nimport { Form, FormControl, Button } from 'react-bootstrap';\r\nimport Masonry from 'react-responsive-masonry';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Search() {\r\n  const [searchText, setSearchText] = useState('');\r\n  const [photo, setPhoto] = useState('');\r\n  const clientid = 'AHZ8qUDbebRPI4fubsR9H1a409oMm60Igh6VppP7T84';\r\n  const [page, setPage] = useState(1);\r\n\r\n  const [images, setImages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const url = `https://api.unsplash.com/search/photos?page=${page}&query=${photo}&client_id=${clientid}`;\r\n    axios.get(url).then(resp => {\r\n      setImages(images => [...images, ...resp.data.results]);\r\n    });\r\n  }, [photo, page]);\r\n\r\n  function changefun(event) {\r\n    event.preventDefault();\r\n    setSearchText(event.target.value);\r\n  }\r\n  function searchfun(event) {\r\n    event.preventDefault();\r\n    setPhoto(searchText);\r\n  }\r\n\r\n  function showMore(event) {\r\n    event.preventDefault();\r\n    setPage(page + 1);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form className='form-data'>\r\n        <Form.Row className='search-form'>\r\n          <FormControl\r\n            onChange={changefun}\r\n            type='text'\r\n            name='photo'\r\n            placeholder='Search for Photos'\r\n            className='input-bar'\r\n            value={searchText}\r\n          />\r\n\r\n          <Button onClick={searchfun} className='search-btn' variant='dark'>\r\n            Search\r\n          </Button>\r\n        </Form.Row>\r\n        <br />\r\n\r\n        <h2>{photo}</h2>\r\n        {photo ? (\r\n          <h4>\r\n            {images.length\r\n              ? `${images.length} images have been found`\r\n              : 'search images'}\r\n          </h4>\r\n        ) : (\r\n          ''\r\n        )}\r\n        <br />\r\n        <div className='image-load'>\r\n          <Masonry className=' image-grid' options={{ isFitWidth: true }}>\r\n            {images.map(photo => {\r\n              return (\r\n                <li className='card-image' key={photo.id}>\r\n                  <img\r\n                    src={photo.urls.small}\r\n                    width='385'\r\n                    height='385'\r\n                    alt={photo.alt_description}\r\n                  />\r\n                </li>\r\n              );\r\n            })}\r\n          </Masonry>\r\n          {photo ? (\r\n            <Button onClick={showMore} className='load-btn' variant='dark'>\r\n              Load More\r\n            </Button>\r\n          ) : (\r\n            ''\r\n          )}\r\n        </div>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n","import './App.css';\nimport Search from './Components/Search';\nfunction App() {\n  return (\n    <div className='App'>\n      <div className='container'>\n        <h1 className='title'>React Photo Search</h1>\n        <Search />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}